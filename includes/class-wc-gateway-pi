<?php
// WC_Gateway_Pi class file for SmartMail Assistant

if ( ! defined( 'ABSPATH' ) ) {
    exit; // Exit if accessed directly.
}

// Ensure WooCommerce is active
if ( ! in_array( 'woocommerce/woocommerce.php', apply_filters( 'active_plugins', get_option( 'active_plugins' ) ) ) ) {
    return;
}

class WC_Gateway_Pi extends WC_Payment_Gateway {
    public function __construct() {
        $this->id                 = 'pi';
        $this->icon               = apply_filters('woocommerce_gateway_icon', '');
        $this->has_fields         = false;
        $this->method_title       = __( 'Pi Payment', 'woocommerce' );
        $this->method_description = __( 'Allows payments with Pi.', 'woocommerce' );

        // Load the settings.
        $this->init_form_fields();
        $this->init_settings();

        // Define user set variables
        $this->title        = $this->get_option( 'title' );
        $this->description  = $this->get_option( 'description' );

        // Actions
        add_action( 'woocommerce_update_options_payment_gateways_' . $this->id, array( $this, 'process_admin_options' ) );
        add_action( 'woocommerce_receipt_' . $this->id, array( $this, 'receipt_page' ) );
        add_action( 'woocommerce_api_wc_gateway_' . $this->id, array( $this, 'check_response' ) );
    }

    public function init_form_fields() {
        $this->form_fields = apply_filters( 'wc_pi_form_fields', array(
            'enabled' => array(
                'title'   => __( 'Enable/Disable', 'woocommerce' ),
                'type'    => 'checkbox',
                'label'   => __( 'Enable Pi Payment', 'woocommerce' ),
                'default' => 'yes'
            ),
            'title' => array(
                'title'       => __( 'Title', 'woocommerce' ),
                'type'        => 'text',
                'description' => __( 'This controls the title which the user sees during checkout.', 'woocommerce' ),
                'default'     => __( 'Pi Payment', 'woocommerce' ),
                'desc_tip'    => true,
            ),
            'description' => array(
                'title'       => __( 'Description', 'woocommerce' ),
                'type'        => 'textarea',
                'description' => __( 'This controls the description which the user sees during checkout.', 'woocommerce' ),
                'default'     => __( 'Pay with Pi.', 'woocommerce' ),
                'desc_tip'    => true,
            ),
        ) );
    }

    public function admin_options() {
        ?>
        <h2><?php _e( 'Pi Payment', 'woocommerce' ); ?></h2>
        <table class="form-table">
            <?php $this->generate_settings_html(); ?>
        </table>
        <?php
    }

    public function payment_fields() {
        if ( $this->description ) {
            echo wpautop( wp_kses_post( $this->description ) );
        }
    }

    public function validate_fields() {
        return true;
    }

    public function process_payment( $order_id ) {
        $order = wc_get_order( $order_id );

        // Mark as on-hold (we're awaiting the payment)
        $order->update_status( 'on-hold', __( 'Awaiting Pi payment', 'woocommerce' ) );

        // Reduce stock levels
        wc_reduce_stock_levels( $order_id );

        // Remove cart
        WC()->cart->empty_cart();

        // Return thankyou redirect
        return array(
            'result'   => 'success',
            'redirect' => $this->get_return_url( $order )
        );
    }

    public function receipt_page( $order_id ) {
        echo '<p>' . __( 'Thank you for your order, please make payment with Pi to complete your purchase.', 'woocommerce' ) . '</p>';
    }

    public function check_response() {
        // Handle the payment response here
    }
}

function wc_add_pi_gateway( $methods ) {
    $methods[] = 'WC_Gateway_Pi';
    return $methods;
}

add_filter( 'woocommerce_payment_gateways', 'wc_add_pi_gateway' );
