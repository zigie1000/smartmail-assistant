<?php
// WooCommerce Gateway Pi for SmartMail Assistant

if ( ! defined( 'ABSPATH' ) ) {
    exit; // Exit if accessed directly.
}

add_filter('woocommerce_payment_gateways', 'smartmail_add_gateway_class');
function smartmail_add_gateway_class($gateways) {
    $gateways[] = 'WC_Gateway_Pi';
    return $gateways;
}

add_action('plugins_loaded', 'smartmail_init_gateway_class');
function smartmail_init_gateway_class() {
    class WC_Gateway_Pi extends WC_Payment_Gateway {
        public function __construct() {
            $this->id = 'pi_gateway';
            $this->icon = '';
            $this->has_fields = true;
            $this->method_title = 'Pi Gateway';
            $this->method_description = 'Description of Pi Gateway';
            
            // Load the settings.
            $this->init_form_fields();
            $this->init_settings();

            // Define user set variables
            $this->title = $this->get_option('title');
            $this->description = $this->get_option('description');
            $this->instructions = $this->get_option('instructions');

            // Actions
            add_action('woocommerce_update_options_payment_gateways_' . $this->id, array($this, 'process_admin_options'));
            add_action('woocommerce_thankyou_' . $this->id, array($this, 'thankyou_page'));

            // Customer Emails
            add_action('woocommerce_email_before_order_table', array($this, 'email_instructions'), 10, 3);
        }

        public function init_form_fields() {
            $this->form_fields = array(
                'enabled' => array(
                    'title'   => 'Enable/Disable',
                    'type'    => 'checkbox',
                    'label'   => 'Enable Pi Gateway',
                    'default' => 'yes'
                ),
                'title' => array(
                    'title'       => 'Title',
                    'type'        => 'text',
                    'description' => 'This controls the title which the user sees during checkout.',
                    'default'     => 'Pi Gateway',
                    'desc_tip'    => true,
                ),
                'description' => array(
                    'title'       => 'Description',
                    'type'        => 'textarea',
                    'description' => 'This controls the description which the user sees during checkout.',
                    'default'     => 'Pay securely using Pi.',
                ),
                'instructions' => array(
                    'title'       => 'Instructions',
                    'type'        => 'textarea',
                    'description' => 'Instructions that will be added to the thank you page and emails.',
                    'default'     => 'Pay securely using Pi.',
                ),
            );
        }

        public function process_payment($order_id) {
            $order = wc_get_order($order_id);
            $order->payment_complete();
            $order->reduce_order_stock();
            wc_empty_cart();
            return array(
                'result' => 'success',
                'redirect' => $this->get_return_url($order),
            );
        }

        public function thankyou_page() {
            if ($this->instructions) {
                echo wpautop($this->instructions);
            }
        }

        public function email_instructions($order, $sent_to_admin, $plain_text = false) {
            if ($this->instructions && ! $sent_to_admin && 'pi_gateway' === $order->get_payment_method()) {
                echo wpautop($this->instructions);
            }
        }
    }
}
